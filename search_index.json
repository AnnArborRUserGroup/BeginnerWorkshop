[
["index.html", "Beginner R Workshop Welcome", " Beginner R Workshop Ann Arbor R User Group Welcome This is the core content for the Ann Arbor R User Group Beginner Workshops. Each workshop consists of two sessions in which we provide hands-on training with the basics of the R environment, and overviews of some of the most widely-used packages. Welcome to the R community! "],
["requirements.html", "Requirements", " Requirements These lessons assume no prior knowledge of the skills or tools, but working through this lesson requires working copies of the software described below. To most effectively use these materials, please make sure to install everything before working through this lesson. R and RStudio R is a programming language that is especially powerful for data exploration, visualization, and statistical analysis. To interact with R, we use RStudio. Get R from the R project website. Get Rstudio from the RStudio website "],
["slack.html", "Slack", " Slack We’ll use Slack to communicate during the workshop. The A2MADS slack group is also a great resource for hearing about R and other data-science related events, announcements, and receiving help with your code. Request to join the A2MADS slack group here. "],
["socrative-channel.html", "Socrative Channel", " Socrative Channel We’ll be using Socrative to ask pop-questions during the workshop. We have a “classroom” that you can join and respond to multiple-choice questions. The link is here. The classroom number is: 22545805 "],
["sticky-notes.html", "Sticky Notes", " Sticky Notes At your station during the workshop, you should have a pair of sticky notes of different colors (green and red were what we used last time). You can use these sticky notes to signal the instructors if you have a question or need help, or if everything is fine. If you’ve placed your green sticky on the top of your laptop, we’ll assume that everything is okay; if you’ve put up your red sticky, one of the instructors will come to your station to assist you. Don’t be afraid to ask for help! You’re here to learn, and we want to make sure we’re best able to help you do that. "],
["0-1-the-data.html", "0.1 The Data!", " 0.1 The Data! We’ll be using a few different data sets for the workshop. Please download them and be prepared to copy them into a working directory the instructors will point you to. The small Herding Cats dataset is available here. The full Herding Cats dataset is available here. The Old Faithful dataset for the optional takehome is available here. 0.1.0.1 Takehome There is an optional takehome assignment available here. "],
["contributing.html", "Contributing", " Contributing The original lesson plans were adapted from the Software Carpentry and Data Carpentry projects. You can contribute to these lessons by clicking the Edit button from any page. Contributors Michelle Berry, Ellis Valentiner, Rob Weyant, Clayton Yochum, Andrew Moore All authors and contributors: Andrew Moore Clayton Yochum Ellis Valentiner Geoffrey Hannigan GitHub Michelle Berry Rob Rob Weyant -->"],
["1-basics-of-r.html", "Lesson 1 Basics of R Learning Objectives", " Lesson 1 Basics of R Learning Objectives Articulating motivations for using R Introduce participants to the RStudio interface Point to relevant information on how to get help, and understand how to ask well formulated questions R is a versatile, open source programming/scripting language that’s useful both for statistics but also data science. Inspired by the programming language S. Open source software under GPL. Superior (if not just comparable) to commercial alternatives. R has over 7,000 user contributed packages at this time. It’s widely used both in academia and industry. Available on all platforms. Not just for statistics, but also general purpose programming. For people who have experience in programmming: R is both an object-oriented and a so-called functional language Large and growing community of peers. "],
["1-1-awesome-r-tools.html", "1.1 Awesome R tools", " 1.1 Awesome R tools 1.1.1 Knitr/R-markdown Knitr is an R library that allows you to create dynamic code reports. Example: This BuzzFeed article, reporting on government surveillance planes, included all of their analysis as an R-markdown document. 1.1.2 Shiny Shiny is a web application framework built for R. Example: This is a shiny app to visualize and explore a movie dataset. 1.1.3 RStudio RStudio is an IDE- an integrated development environment. It allows us to write, execute, and debug R code. It also has several other nice features, accessible through its GUI (graphical user interface), that make it easier to use R. RStudio is such a popular tool among R users, that several other languages have tried to emulate it, such as Spyder for Python. Start RStudio – Let’s start learning about our tool. Rstudio’s layout includes 4 quadrants Scripts Console Environment/History Plotting/Packages/Help rstudio-image To adjust the layout of your quadrants go to Preferences &gt; Pane Layout "],
["1-2-interacting-with-r.html", "1.2 Interacting with R", " 1.2 Interacting with R There are two main ways of interacting with R: using the console or by using script files (plain text files that contain your code). The console window is the place where R is waiting for you to tell it what to do, and where it will show the results of a command. You can type commands directly into the console, but they will be forgotten when you close the session. It is better to enter the commands in the script editor, and save the script. This way, you have a complete record of what you did, you can easily show others how you did it and you can do it again later on if needed. You can copy-paste into the R console, but the Rstudio script editor allows you to ‘send’ the current line or the currently selected text to the R console using the Ctrl-Enter shortcut. If R is ready to accept commands, the R console shows a &gt; prompt. If it receives a command (by typing, copy-pasting or sent from the script editor using Ctrl-Enter), R will try to execute it, and when ready, show the results and come back with a new &gt;-prompt to wait for new commands. If R is still waiting for you to enter more data because it isn’t complete yet, the console will show a + prompt. It means that you haven’t finished entering a complete command. This is because you have not ‘closed’ a parenthesis or quotation. If you’re in Rstudio and this happens, click inside the console window and press Esc; this should help you out of trouble. "],
["1-3-seeking-help.html", "1.3 Seeking help", " 1.3 Seeking help 1.3.1 I know the name of the function I want to use, but I’m not sure how to use it If you need help with a specific function, let’s say barplot(), you can type: ?barplot If you just need to remind yourself of the names of the arguments, you can use: args(lm) If the function is part of a package that is installed on your computer but don’t remember which one, you can type: ??geom_point 1.3.2 I want to use a function that does X, there must be a function for it but I don’t know which one… If you are looking for a function to do a particular task, you can use help.search() (but only looks through the installed packages): help.search(&quot;kruskal&quot;) If you can’t find what you are looking for, you can use the rdocumention.org website that search through the help files across all packages available. 1.3.3 I am stuck… I get an error message that I don’t understand Start by googling the error message. However, this doesn’t always work very well because often, package developers rely on the error catching provided by R. You end up with general error messages that might not be very helpful to diagnose a problem (e.g. “subscript out of bounds”). However, you should check stackoverflow. Search using the [r] tag. Most questions have already been answered, but the challenge is to use the right words in the search to find the answers: http://stackoverflow.com/questions/tagged/r The Introduction to R can also be dense for people with little programming experience but it is a good place to understand the underpinnings of the R language. The R FAQ is dense and technical but it is full of useful information. 1.3.4 Asking for help The key to get help from someone is for them to grasp your problem rapidly. You should make it as easy as possible to pinpoint where the issue might be. Try to use the correct words to describe your problem. For instance, a package is not the same thing as a library. Most people will understand what you meant, but others have really strong feelings about the difference in meaning. The key point is that it can make things confusing for people trying to help you. Be as precise as possible when describing your problem If possible, try to reduce what doesn’t work to a simple reproducible example. If you can reproduce the problem using a very small data.frame instead of your 50,000 rows and 10,000 columns one, provide the small one with the description of your problem. When appropriate, try to generalize what you are doing so even people who are not in your field can understand the question. If you want to share your object, provide either the raw file (i.e., your CSV file) with your script up to the point of the error (and after removing everything that is not relevant to your issue). Alternatively, in particular if your questions is not related to a data.frame, you can save any R object to a file: saveRDS(iris, file=&quot;/tmp/iris.rds&quot;) The content of this file is however not human readable and cannot be posted directly on stackoverflow. It can however be sent to someone by email who can read it with this command: some_data &lt;- readRDS(file=&quot;~/Downloads/iris.rds&quot;) Last, but certainly not least, always include the output of sessionInfo() as it provides critical information about your platform, the versions of R and the packages that you are using, and other information that can be very helpful to understand your problem. sessionInfo() ## R version 3.3.2 (2016-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu precise (12.04.5 LTS) ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets base ## ## loaded via a namespace (and not attached): ## [1] backports_1.0.5 magrittr_1.5 bookdown_0.3 rprojroot_1.2 ## [5] htmltools_0.3.5 tools_3.3.2 rstudioapi_0.6 yaml_2.1.14 ## [9] Rcpp_0.12.9 stringi_1.1.2 rmarkdown_1.3 knitr_1.15.1 ## [13] methods_3.3.2 stringr_1.2.0 digest_0.6.12 evaluate_0.10 1.3.5 Where to ask for help? Your friendly colleagues: if you know someone with more experience than you, they might be able and willing to help you. Stackoverflow: if your question hasn’t been answered before and is well crafted, chances are you will get an answer in less than 5 min. The R-help: it is read by a lot of people (including most of the R core team), a lot of people post to it, but the tone can be pretty dry, and it is not always very welcoming to new users. If your question is valid, you are likely to get an answer very fast but don’t expect that it will come with smiley faces. Also, here more than everywhere else, be sure to use correct vocabulary (otherwise you might get an answer pointing to the misuse of your words rather than answering your question). You will also have more success if your question is about a base function rather than a specific package. If your question is about a specific package, see if there is a mailing list for it. Usually it’s included in the DESCRIPTION file of the package that can be accessed using packageDescription(&quot;name-of-package&quot;). You may also want to try to email the author of the package directly. There are also some topic-specific mailing lists (GIS, phylogenetics, etc…), the complete list is here. 1.3.6 More resources The Posting Guide for the R mailing lists. How to ask for R help useful guidelines -->"],
["2-vectors-and-data-types.html", "Lesson 2 Vectors and Data Types 2 Learning Objectives", " Lesson 2 Vectors and Data Types 2 Learning Objectives Familiarize participants with R syntax Understand the concepts of objects and assignment Understand the concepts of vectors and data types Get exposed to a few functions "],
["2-1-creating-objects.html", "2.1 Creating objects", " 2.1 Creating objects You can get output from R simply by typing in math in the console 3 + 5 12/7 2*4 2^4 We can also comment what it is we’re doing # I am adding 3 and 5. R is fun! 3 + 5 What happens if we do that same command without the # sign in the front? I am adding 3 and 5. R is fun! 3 + 5 Now R is trying to run that sentence as a command, and it doesn’t work. Now we’re stuck over in the console. The + sign means that it’s still waiting for input, so we can’t type in a new command. To get out of this type Esc. This will work whenever you’re stuck with that + sign. It’s great that R is a glorified caluculator, but obviously we want to do more interesting things. To do useful and interesting things, we need to assign values to objects. To create objects, we need to give it a name followed by the assignment operator &lt;- and the value we want to give it. "],
["2-2-assignment-operator.html", "2.2 Assignment operator", " 2.2 Assignment operator For instance, instead of adding 3 + 5, we can assign those values to objects and then add them. # assign 3 to a a &lt;- 3 # assign 5 to b b &lt;- 5 # what now is a a # what now is b b # Add a and b a + b &lt;- is the assignment operator. It assigns values on the right to objects on the left. So, after executing x &lt;- 3, the value of x is 3. The arrow can be read as 3 goes into x. You can also use = for assignments but not in all contexts so it is good practice to use &lt;- for assignments. = should only be used to specify the values of arguments in functions, see below. In RStudio, typing Alt + - (push Alt, the key next to your space bar at the same time as the - key) will write &lt;- in a single keystroke. To view which objects we have stored in memory, we can use the ls() command ls() To remove objects we can use the rm() command rm(a) 2.2.1 Exercise What happens if we change a and then re-add a and b? Does it work if you just change a in the script and then add a and b? Did you still get the same answer after they changed a? If so, why do you think that might be? We can also assign a + b to a new variable, c. How would you do this? "],
["2-3-notes-on-objects.html", "2.3 Notes on objects", " 2.3 Notes on objects Objects can be given any name such as x, current_temperature, or subject_id. You want your object names to be explicit and not too long. They cannot start with a number (2x is not valid but x2 is). R is case sensitive (e.g., my_data is different from My_data). There are some names that cannot be used because they represent the names of fundamental functions in R (e.g., if, else, for, see here for a complete list). In general, even if it’s allowed, it’s best to not use other function names (e.g., c, T, mean, data, df, weights). In doubt check the help to see if the name is already in use. It’s also best to avoid dots (.) within a variable name as in my.dataset. There are many functions in R with dots in their names for historical reasons, but because dots have a special meaning in R (for methods) and other programming languages, it’s best to avoid them. It is also recommended to use nouns for variable names, and verbs for function names. It’s important to be consistent in the styling of your code (where you put spaces, how you name variable, etc.). In R, two popular style guides are Hadley Wickham’s and Google’s. When assigning a value to an object, R does not print anything. You can force to print the value by using parentheses or by typing the name: "],
["2-4-functions.html", "2.4 Functions", " 2.4 Functions The other key feature of R are functions. These are R’s built in capabilities. Some examples of these are mathematical functions, like sqrt and round. You can also get functions from libraries (which we’ll talk about in a bit), or even write your own. "],
["2-5-functions-and-their-arguments.html", "2.5 Functions and their arguments", " 2.5 Functions and their arguments Functions are “canned scripts” that automate something complicated or convenient or both. Many functions are predefined, or become available when using the function library() (more on that later). A function usually gets one or more inputs called arguments. Functions often (but not always) return a value. A typical example would be the function sqrt(). The input (the argument) must be a number, and the return value (in fact, the output) is the square root of that number. Executing a function (‘running it’) is called calling the function. An example of a function call is: sqrt(a) Here, the value of a is given to the sqrt() function, the sqrt() function calculates the square root. This function is very simple, because it takes just one argument. The return ‘value’ of a function need not be numerical (like that of sqrt()), and it also does not need to be a single item: it can be a set of things, or even a data set. We’ll see that when we read data files in to R. Arguments can be anything, not only numbers or filenames, but also other objects. Exactly what each argument means differs per function, and must be looked up in the documentation (see below). If an argument alters the way the function operates, such as whether to ignore ‘bad values’, such an argument is sometimes called an option. Most functions can take several arguments, but many have so-called defaults. If you don’t specify such an argument when calling the function, the function itself will fall back on using the default. This is a standard value that the author of the function specified as being “good enough in standard cases”. An example would be what symbol to use in a plot. However, if you want something specific, simply change the argument yourself with a value of your choice. Let’s try a function that can take multiple arguments round. round(3.14159) ## [1] 3 We can see that we get 3. That’s because the default is to round to the nearest whole number. If we want more digits we can see how to do that by getting information about the round function. We can use args(round) or look at the help for this function using ?round. args(round) ## function (x, digits = 0) ## NULL ?round We see that if we want a different number of digits, we can type digits=2 or however many we want. round(3.14159, digits = 2) ## [1] 3.14 If you provide the arguments in the exact same order as they are defined you don’t have to name them: round(3.14159, 2) ## [1] 3.14 However, it’s usually not recommended practice because it’s a lot of remembering to do, and if you share your code with others that includes less known functions it makes your code difficult to read. (It’s however OK to not include the names of the arguments for basic functions like mean, min, etc…) Another advantage of naming arguments, is that the order doesn’t matter. This is useful when there start to be more arguments. "],
["2-6-vectors-and-data-types-1.html", "2.6 Vectors and data types", " 2.6 Vectors and data types A vector is the most common and basic data structure in R, and is pretty much the workhorse of R. It’s basically just a list of values, mainly either numbers or characters. They’re special lists that you can do math with. You can assign this list of values to a variable, just like you would for one item. You can add elements to your vector simply by using the c() function, which stands for combine: one_to_five &lt;- c(1, 2, 3, 4, 5) one_to_five &lt;- 1:5 one_to_five A vector can also contain characters: primary_colors &lt;- c(&quot;red&quot;, &quot;yellow&quot;, &quot;blue&quot;) primary_colors There are many functions that allow you to inspect the content of a vector. length() tells you how many elements are in a particular vector: length(one_to_five) length(primary_colors) You can also do math with whole vectors. For instance if we wanted to multiply all the values in our vector by a scalar, we can do 5 * one_to_five or we can add the data in the two vectors together two_to_ten &lt;- one_to_five + one_to_five two_to_ten This is very useful if we have data in different vectors that we want to combine or work with. There are few ways to figure out what’s going on in a vector. class() indicates the class (the type of element) of an object: class(one_to_five) class(primary_colors) new_digits &lt;- c(one_to_five, 90) # adding at the end new_digits &lt;- c(30, new_digits) # adding at the beginning new_digits What happens here is that we take the original vector one_to_five, and we are adding another item first to the end of the other ones, and then another item at the beginning. We can do this over and over again to build a vector or a dataset. As we program, this may be useful to autoupdate results that we are collecting or calculating. We just saw 2 of the data types that R uses: &quot;character&quot; and &quot;integer&quot;. The others you will likely encounter during data analysis are: &quot;logical&quot; for TRUE and FALSE (the boolean data type) &quot;numeric&quot; for floating point decimal numbers &quot;factor&quot; for categorical data. Similar to &quot;character&quot; data, but factors have levels Importantly, a vector can only contain one data type. If you combine multiple data types in a vector with the c() command, R will try to coerce all the values to the same data type. If it cannot, it will throw an error. For example, what data type is our one_to_five vector if we divide it by 2? divided_integers &lt;- one_to_five/2 divided_integers class(divided_integers) Vectors are indexed sets, which means that every value can be referred to by its order in the vector. R indexes start at 1. Programming languages like Fortran, MATLAB, and R start counting at 1, because that’s what human beings typically do. Languages in the C family (including C++, Java, Perl, and Python) count from 0 because that’s simpler for computers to do. We can index a vector in many different ways. We can specify a position of a single value, a range of values, or a vector of values. We can even specify which values to remove by their indices. one_to_five[3] one_to_five[1:3] one_to_five[c(1, 3, 5)] one_to_five[-2] "],
["2-7-other-data-structures.html", "2.7 Other data structures", " 2.7 Other data structures Vectors are one of the many data structures that R uses. Other important ones are lists (list), matrices (matrix), and data frames (data.frame) -->"],
["3-extending-r-with-packages.html", "Lesson 3 Extending R with Packages 3 Learning Objectives", " Lesson 3 Extending R with Packages 3 Learning Objectives Know what packages are and how to install them from CRAN "],
["4-packages.html", "Lesson 4 Packages", " Lesson 4 Packages Packages are bundles of code which extend the functionality of R. Anyone can make an R package, and anyone can install anyone else’s R package (if they make it available). This is part of the beauty of open source, and using different R packages is essential to modern R workflows. You can get packages from many different places, but we’ll focus on just the most common one: CRAN. CRAN is the Comprehensive R Archive Network, a global network of servers which make available for download a set of vetted R packages. The next section is about importing data, and we’ll be using a package called readr that is specially equipped to import tabular data. "],
["4-1-installation.html", "4.1 Installation", " 4.1 Installation To download and install a package from CRAN, call the install.packages command on a string with the name of the desired package. You will get output describing the installation progress. install.packages(&quot;readr&quot;) You may be asked to choose a mirror; the RStudio mirror is a good choice as it will pick the nearest mirror automatically. You only need to install a package once per machine, unless you need to update an already-installed package. Calling install.packages for an existing package will update it if there’s a more recent version on CRAN than on your machine. You can view all of the installed packages using the installed.packages command. This will output a lot of information for each package, so if you only want a list of the installed package names, you can specify that you want the “Package” column. I like to look at this as a vector. as.vector(installed.packages()[,&quot;Package&quot;]) "],
["4-2-loading.html", "4.2 Loading", " 4.2 Loading Most packages need to be loaded into the current environment to be accessible. You can think of packages as toolboxes, and at the start of each session we need to tell R that we want to use a particular set of tools. We load packages with the library command: library(readr) # notice the lack of quotes library statements are usually placed at the start of any code file that you write; oftentimes they’re one of the first things you’ll type before getting started. -->"],
["5-data-frames.html", "Lesson 5 Data frames 5 Learning Objectives", " Lesson 5 Data frames 5 Learning Objectives load external data (CSV files) in memory understand the concept of a data.frame know how to access any element of a data.frame understand factors and how to manipulate them "],
["5-1-setup.html", "5.1 Setup", " 5.1 Setup The file required for this lesson can be downloaded by clicking on this link Move the downloaded file into the directory for this workshop To view your current working directory use the getwd() command To set you working directory, use the setwd() command. We want to set the working directory to the location of our project. For example: setwd(&quot;~/Workshops/AARUG&quot;) "],
["5-2-looking-at-data.html", "5.2 Looking at data", " 5.2 Looking at data You are now ready to load the data. We are going to use a function from the readr package called read_csv() to load the data file into memory (as a data.frame). In this case, our data is in a subdirectory called “data”. library(readr) cats &lt;- read_csv(file = &#39;data/herding-cats-small.csv&#39;) ## Parsed with column specification: ## cols( ## street = col_character(), ## coat = col_character(), ## sex = col_character(), ## age = col_double(), ## weight = col_double(), ## fixed = col_integer(), ## wander_dist = col_double(), ## roamer = col_character(), ## cat_id = col_integer() ## ) When you import a file, readr prints out a message that tells you what type of data it thinks is in each column of your file. By default, readr is usually able to guess what classes your data belong to, and sets them up for you as a data.frame. If we want to check that our data has been loaded, we can print the variable’s value: cats. cats The dataset we’re using for the current examples is quite small, and you should be able to see all the data in your console. However, if our dataset was larger, we probably wouldn’t want to print the whole thing to look at it. Instead, we can use the head command to view the first six lines or the View command to open the dataset in a spreadsheet-like viewer. View(cats) We’ve just done two very useful things. 1. We’ve read our data in to R, so now we can work with it in R 2. We’ve created a data frame (with the read_csv command) the standard way R works with data. "],
["5-3-what-are-data-frames.html", "5.3 What are data frames?", " 5.3 What are data frames? data.frame is the de facto data structure for most tabular data and what we use for statistics and plotting. A data.frame is actually a list of vectors of identical lengths. Each vector represents a column, and each vector can be of a different data type (e.g., characters, integers, factors). Let’s use the class() function we’ve seen in the previous lesson to take talk about data.frames in more detail. class(cats) In this case, class() returns a vector with three values, tbl_df, tbl, and data.frame. The first two values are attached by readr when it imports data. These classes instruct R how it should print the data.frame to the console. You’ll note that in addition to the column names, the class of each column is displayed, along with the dimensions of the data. A data.frame (and tibbles) can be created by the functions read_csv() or read_table(), in other words, when importing spreadsheets from your hard drive (or the web). Let’s now check the structure of this data.frame in more details with the function str(): str(cats) "],
["5-4-inspecting-data-frame-objects.html", "5.4 Inspecting data.frame objects", " 5.4 Inspecting data.frame objects We’ve seen how str() can be useful to check the content and the structure of a data.frame. Here is a non-exhaustive list of functions to get a sense of the content/structure of the data. Size: dim() - returns a vector with the number of rows in the first element, and the number of columns as the second element (the dimensions of the object) nrow() - returns the number of rows ncol() - returns the number of columns Content: head() - shows the first 6 rows tail() - shows the last 6 rows Names: names() - returns the column names (synonym of colnames() for data.frame objects) rownames() - returns the row names Summary: str() - structure of the object and information about the class, length and content of each column summary() - summary statistics for each column Note: most of these functions are “generic”, they can be used on other types of objects besides data.frame. "],
["5-5-indexing-data-frame-objects.html", "5.5 Indexing data.frame objects", " 5.5 Indexing data.frame objects Our cats data frame has rows and columns (it has 2 dimensions), if we want to extract some specific data from it, we need to specify the “coordinates” we want from it. Row numbers come first, followed by column numbers (i.e. [row, column]). cats[1, 2] # first element in the 2nd column of the data frame cats[1, 6] # first element in the 6th column cats[1:3, 7] # first three elements in the 7th column cats[3, ] # the 3rd element for all columns cats[, 7] # the entire 7th column head_meta &lt;- cats[1:6, ] # Row 1-6 which is the same as head() For larger datasets, it can be tricky to remember the column number that corresponds to a particular variable. (Are species names in column 5 or 7? oh, right… they are in column 6). In some cases, in which column the variable will be can change if the script you are using adds or removes columns. It’s therefore often better to use column names to refer to a particular variable, and it makes your code easier to read and your intentions clearer. You can do operations on a particular column, by selecting it using the $ sign. In this case, the entire column is a vector. You can use names(cats) or colnames(cats) to remind yourself of the column names. For instance, to extract all the cats’ weight information from our dataset: cats$weight In some cases, you may way to select more than one column. You can do this using the square brackets, passing in a vector of the columns to select. Suppose we wanted weight and coat information: cats[ , c(&quot;weight&quot;, &quot;coat&quot;)] You can even access columns by column name and select specific rows of interest. For example, if we wanted the weight and coat of just rows 4 through 7, we could do: cats[4:7, c(&quot;weight&quot;, &quot;coat&quot;)] We can can also use logical statements to select and filter items from a data.frame. For example, to select all rows with black cats we could use the following statement cats[cats$coat == &quot;black&quot;, ] let’s break this down a bit. The logical statement in the brackets returns a vector of TRUE and FALSE values. cats$coat == &quot;black&quot; These booleans allow us to select which records we want from our data.frame Another way to do this is with the function which(). which() finds the indexes of records meeting a logical statement which(cats$coat == &quot;black&quot;) So, we could also write cats[which(cats$coat == &quot;black&quot;), ] But that’s getting really long and ugly. R is already considered somewhat of an ugly duckling among programming languages, so no reason to play into the stereotype. We can combine logical statements and index statements cats[cats$coat == &quot;black&quot;, c(&quot;coat&quot;, &quot;weight&quot;)] Finally, we can use &amp;, the symbol for “and”, and |, the symbol for “or”, to make logical statements. cats[cats$coat == &quot;black&quot; &amp; cats$roamer == &quot;no&quot;, ] This statement selects all records with black cats that also like string "],
["5-6-factors.html", "5.6 Factors", " 5.6 Factors Factors are used to represent categorical data. Factors can be ordered or unordered and are an important class for statistical analysis and for plotting. Factors are stored as integers, and have labels associated with these unique integers. While factors look (and often behave) like character vectors, they are actually integers under the hood, and you need to be careful when treating them like strings. In the data frame we just imported, let’s create a factor. # a new function, factor() # it takes a vector and converts it into a factor cats$coat &lt;- factor(cats$coat) str(cats) We can see the names of the multiple columns. And, we see that coat is a Factor w/ 5 levels Once created, factors can only contain a pre-defined set values, known as levels. By default, R always sorts levels in alphabetical order. You can check this by using the function levels(), and check the number of levels using nlevels(): levels(cats$coat) nlevels(cats$coat) Sometimes, the order of the factors does not matter, other times you might want to specify the order because it is meaningful (e.g., “low”, “medium”, “high”) or it is required by particular type of analysis. Additionally, specifying the order of the levels allows to compare levels: satisfaction &lt;- factor(c(&quot;low&quot;, &quot;high&quot;, &quot;medium&quot;, &quot;high&quot;, &quot;low&quot;, &quot;medium&quot;, &quot;high&quot;)) levels(satisfaction) satisfaction &lt;- factor(satisfaction, levels = c(&quot;low&quot;, &quot;medium&quot;, &quot;high&quot;)) levels(satisfaction) min(satisfaction) ## doesn&#39;t work ## Error in Summary.factor(structure(c(1L, 3L, 2L, 3L, 1L, 2L, 3L), .Label = c(&quot;low&quot;, : &#39;min&#39; not meaningful for factors satisfaction &lt;- factor(satisfaction, levels = c(&quot;low&quot;, &quot;medium&quot;, &quot;high&quot;), ordered = TRUE) levels(satisfaction) min(satisfaction) ## works! In R’s memory, these factors are represented by numbers (1, 2, 3). They are better than using simple integer labels because factors are self describing: &quot;low&quot;, &quot;medium&quot;, and &quot;high&quot;&quot; is more descriptive than 1, 2, 3. Which is low? You wouldn’t be able to tell with just integer data. Factors have this information built in. It is particularly helpful when there are many levels (like the species in our example data set). 5.6.1 Converting factors If you need to convert a factor to a character vector, simply use as.character(x). Converting a factor to a numeric vector is however a little trickier, and you have to go via a character vector. Compare: f &lt;- factor(c(1, 5, 10, 2)) as.numeric(f) ## wrong! and there is no warning... as.numeric(as.character(f)) ## works... as.numeric(levels(f))[f] ## The recommended way. -->"],
["6-r-markdown.html", "Lesson 6 R Markdown 6 Learning Objectives", " Lesson 6 R Markdown 6 Learning Objectives Understand why literate programming is useful Create and edit an RMarkdown file Know how to manipulate some common chunk options R Markdown is a special file format which allows us to combine text, code, and the output of that code in a single file. This combination of explanation, code, and results is called literate programming and is a powerful way to share research and data explorations. RMarkdown is an extended version of the Markdown (.md) file format, which is an easy way to make nicely formatted text documents without endlessly tinkering with the formatting (as you might with LaTeX). The software community loves Markdown because in addition to being straightforward, it has good support for formatting code, which can be a pain in other formats. RMarkdown takes this a step further by allowing you to run the code in your document, and having the output appear below the code that made it. If you’ve used ipython/Jupyter notebooks before, R Markdown will feel similar. All the lessons in this workshop were created with R Markdown! "],
["6-1-my-first-rmd.html", "6.1 My First Rmd", " 6.1 My First Rmd Before we get started, let’s make sure that the RMarkdown package is installed. Remember, you only need to run install.packages command once, unless you want to update the package. (Unlike most packages, we don’t need a library() statement for rmarkdown. Don’t worry about that much for now- RStudio takes care of things behind the scenes.) install.packages(&quot;rmarkdown&quot;) Rstudio makes it easy to create a new RMarkdown file, and it even starts with a demo file that shows off most of the basic features of the Rmd format. In the upper-left corner, click the “new file” icon and select RMarkdown. A window should appear to help you configure this file initially. There’s a lot of options (R Markdown can do so much!), but for now, make sure your name is in the “Author” field, and change the “Title” to be something like “AARUG Workshop”. Before we delve into what each of these pieces mean, let’s “knit” the document so we can see what kind of output RMarkdown produces. Above the file, press the knit button, the one that looks like a ball of yarn. You should see a new pane open in RStudio that shows R “knitting” the document, and when it’s done, a pop-up will appear showing the knitted output. This new output being displayed as an html file; look in the file browser pane, and you’ll see a .html file next to your .Rmd file (may need to refresh), because RStudio automatically saved this output when the document finished knitting. Let’s look at the individual pieces in this document: 6.1.1 Header This is the section at the top, with three dashes before and after. This lists some metadata about the object. The title, date, and author form the start of the output document, and the output: line instructs the knitting process to generate an html file. 6.1.2 Section Titles You can enlarge text be preceding it with one or more pound signs (#). This is mainly useful for organizing a document into sections. The more pound signs, the smaller the text, so when you make sub-section you should add at least one more pound sign than used in the parent sections’ title. 6.1.3 Link You can make text clickable by including a link to a different website. An example can be found above, where we included a link to CRAN. There are two parts to creating linked text. The first part is including the text you want to see, surrounded by square brackets [CRAN]. Immediately after that, add the link surrounded by parentheses (https://cran.r-project.org). The final product looks like [CRAN](https://cran.r-project.org). 6.1.4 Bold/Italic Text The double-asterisks surrounding the word “Knit” in the second paragraph cause that piece of text to be bold. This phrase can be multiple words, but should not have spaces immediately on the inside of the asterisks. You can make text italix by similarly wrapping in underscores (_) or using single asterisks. 6.1.5 Code Chunks This is the real meat of the document! An R Markdown code chunk is a section which starts and ends with triple-backticks (`, not '). After the initial set, the curly-bracketed section which starts with {r is what forces this to be ran as R code; without this piece, the section would get formatted like code, but would not be executed when knitting. The phrase after the r is the chunk name. Chunks do not need to be named, but no two chunks can have the same name. Naming chunks can help keep code organized and make it easier to track down the source of errors when they occur. 6.1.5.1 Chunk Options As the second default section discusses, we can hide the code in a code chunk by placing a comma after out chunk name and setting an option echo=FALSE. The code will still execute, and its output will be inserted in the knitted document, but it will not be shown. Similarly, you can set eval=FALSE to avoid running a code chunk. "],
["6-2-digging-deeper.html", "6.2 Digging Deeper", " 6.2 Digging Deeper There’s a lot more to RMarkdown than just this; as the demo document shows, you can visit http://rmarkdown.rstudio.com to learn more. We’ll be using R Markdown for the rest of this workshop to keep a running log of what we’re learning. This will allow you to walk away with a knit document which has not only the code commands you’ve learned to use, but the output of those commands and some explanatory text. That’s literate programming! -->"],
["7-dplyr.html", "Lesson 7 dplyr", " Lesson 7 dplyr 80% of the work involved with data analysis involves cleaning and shaping the data until it’s in the state you need. Bracket subsetting is handy, but it can be cumbersome and difficult to read, especially for complicated operations. Enter dplyr! dplyr is a package for making data manipulation easier. (It does a lot more too, but this is what we’ll focus on). Unlike the subsetting commands we’ve already worked on, dplyr is designed to be highly expressive, and highly readable. It’s structured around a set of verbs, or grammar of data manipulation. The core functions we’ll talk about are below: select arrange filter group_by mutate summarise/summarize "],
["7-1-getting-the-package.html", "7.1 Getting the package", " 7.1 Getting the package install.packages(&quot;dplyr&quot;) Again, you may be asked to choose a CRAN mirror; RStudio is a good choice. Unlike the rmarkdown package, we’ll be using dplyr in the console. In order to do that, we need to load the package into our environment so we can access functions from dplyr. We do this with the library command: library(&quot;dplyr&quot;) You only need to install a package once per computer, but you need to load it every time you open a new R session and want to use that package. "],
["7-2-subsetting-data.html", "7.2 Subsetting Data", " 7.2 Subsetting Data The first two dplyr commands we’ll use help us to subset our data by rows and columns. 7.2.1 select The first command we’ll use is select, which allows us to choose columns from our dataset. Let’s use our cats dataset and select only the coat column; we did this previously with cats[, &quot;coat&quot;] With dplyr, we don’t need to enclose our column names in quotes select(cats, coat) Notice how the output differs slightly; all the main dplyr verbs behave consistently in that their inputs and outputs are both data.frames, rather than returning a simple vector as the bracket-indexing method did. All of the main “verbs” we’ll talk about will return a data.frame as their result. We can select more columns by giving select additional arguments, and our output data.frame will have columns according to the order of our arguments select(cats, coat, cat_id) 7.2.2 filter So where select allowed us to select columns, filter operated on rows. Say we want to see the all the cats with black coats; we saw earlier how to use that using bracket-indexing: cats[cats$coat == &quot;black&quot;, ] In dplyr, this looks like filter(cats, coat == &quot;black&quot;) Notice we don’t have to use the $ operator to tell filter where the coat column is; it’s smart enough to assume we want the coat column from the data.frame we passed in. 7.2.3 arrange Maybe you have a set of observations in your data that you want to organize by their value. arrange allows us to change the order of rows in our dataset based on their values. arrange(cats, coat) # you can include additional columns to help sort the data arrange(cats, coat, sex) 7.2.4 mutate One common task in working with data is updating/cleaning some of the values in columns. mutate allows us to do this relatively easily. Let’s say I don’t want a lot of decimal places in one of my measurements. I can use mutate to update my existing variable: mutate(cats, weight = round(weight, 2)) Another common task is generating a new column based on values that are already in the dataset you are working on. mutate helps us do this, and tacks a new column to the end of our data.frame. # let&#39;s say you want to add two variables together mutate(cats, new_variable = age + weight) # you can include as many new variables as you want, separated by a comma mutate(cats, new_var_1 = age + weight, new_var_2 = age * weight) "],
["7-3-pipes.html", "7.3 Pipes", " 7.3 Pipes You’ll often find yourself needing to use multiple functions in a row to organize some data that you’re working on. This can sometimes lead to dense code that is difficult to read. # for example sort(round(sqrt(cats$age * 2), 3)) In the code above, I have multiple steps to get my result, but you have to read what’s going on from the inside out. This can be cumbersome, especially if you need to understand how one function’s output influences the next operation. 7.3.1 Using Pipes dplyr includes a special operator designed to make code flow and appear more readable. It’s written as %&gt;%, and you can call it the “pipe” operator. Our example above can be re-written as: cats$age %&gt;% sqrt() %&gt;% round(3) %&gt;% sort() Instead of being nested within a bunch of commands, you can see read the code as a series of statements: 1. With the ages of all the cats, 2. Take the square-root of these values, then 3. Round the result to the 3rd digit, then 4. Sort the values in ascending order I encourage you to think of the %&gt;% as short-hand for “then”, when reading code that uses it! “Pipe” operators are found in other languages; they get their name from the idea that your code can be thought of as a “pipeline”. Let’s look at another example. round(1.23456789, 3) We can use a pipe operator to acheive the same thing. 1.23456789 %&gt;% round(3) The pipe takes care of making sure the output of the expression on the left-hand-side (a simple numeric, in this case) is inserted as the first argument of the expressing on the right-hand-side. We can also pipe into other argument positions by using a period as a placeholder. 3 %&gt;% round(1.23456789, .) These are contrived examples, and I don’t suggest using pipes for simple operations like rounding. The pipes really become useful when chaining together multiple operations in sequence, as we’ll do with our dplyr functions. "],
["7-4-combining-select-filter.html", "7.4 Combining Select &amp; Filter", " 7.4 Combining Select &amp; Filter The pipe is really helpful when combined with the data-manipulation of dplyr. Remember how we used filter to select only the black cats? What if we only want to see the ID’s of those cats, rather than all the info about them? We’ve already seen we can use select to pick out certain columns. We can use that to select the cat_id column from our filtered dataset like so # reading from the inside out select(filter(cats, coat == &quot;black&quot;), cat_id) That might not look too bad now, but what if we wanted to do another operation on that output? We’d add another layer of nesting, and having to read that line from the inside-out can quickly become annoying. We can use the pipe operator to clean that up. # reading from left to right filter(cats, coat == &quot;black&quot;) %&gt;% select(cat_id) We could even add another pipe to feed cats into filter; it isn’t necessary, but it makes it even easier to see what we’re operating on in this chain of commands. We’ll combine this with some line breaks to really make this easy to read: cats %&gt;% filter(coat == &quot;black&quot;) %&gt;% select(cat_id) 7.4.1 summarize While mutate creates new columns, it’s often useful to summarize multiple rows into a single value. Say we want to find the mean weight of all these cats; enter summarize! Like mutate, the arguments to summarize (after the data.frame we want to operate on) are expressions. We can combine summarize with the mean function to get a mean weight for our collection of cats like so: cats %&gt;% summarize(mean_weight = mean(weight)) Notice how we have only a single value returned, but it’s still in a data.frame format. This is subtle, but important; all these basic dplyr verbs take in data.frames and also return data.frames. This consistency helps make long chains of dplyr operations possible. 7.4.2 group_by A very common data analysis task is to do operations like we did above, but to do them on a group-by-group basis. To do this with dplyr, we’ll use the group_by function. Let’s look at the mean weights of our cats, grouping up by coat. This will give us the mean weight of the black cats, mean weight of the calico cats, etc. We can do this by inserting a group_by function into our earlier expression for computing mean weight: cats %&gt;% group_by(coat) %&gt;% summarize(mean_weight = mean(weight)) Ta-da! We can also use mutate on a per-group basis. Let’s make a new column which centers our weights around zero; this can be done by subtracting the group’s mean weight from each cat’s weight: cats %&gt;% group_by(coat) %&gt;% mutate(centered_weight = weight - mean(weight)) "],
["7-5-going-further.html", "7.5 Going further", " 7.5 Going further This is an introductory look at dplyr, just enough to make you dangerous. As you continue your R journey I suggest looking into the other awesome things you can do with this package! -->"],
["8-data-visualization.html", "Lesson 8 Data visualization Learning Objectives", " Lesson 8 Data visualization Learning Objectives Grammar of graphics concepts (geoms, aesthetics) Advanced plots (scales, facets, themes) Writing images (and other things) to file "],
["8-1-built-in-plotting-functions.html", "8.1 Built in plotting functions", " 8.1 Built in plotting functions When working with large sets of numbers it can be useful to display that information graphically. R has a number of built-in functions for creating plots such as histograms, scatter plots, bar charts, boxplots and much more. We’ll try these out using the cats data introduced earlier. The plot() function provides a method for generic x and y plotting (e.g. scatter plots). Scatter plot Let’s start by creating a scatter plot. A scatter plot provides a graphical view of the relationship between two sets of numbers. We can create a scatter plot using the plot() function and supplying the x and y coordinates of the points. Using the cats data, we can make a scatterplot of kitten birth weight by mother’s age. cats &lt;- read.csv(&quot;data/herding-cats.csv&quot;) plot(x = cats$age, y = cats$weight) Each point represents a row in our dataset. The value on the x-axis is the mother’s age and the values on the y-axis correspond to the birth weight for the infant. For any plot you can customize many features of your graphs (fonts, colors, axes, titles) through graphic options. plot(x = cats$age, y = cats$weight, xlim = c(0, 10), ylim = c(0, 15), xlab = &quot;Age&quot;, ylab = &quot;Weight&quot;, main = &quot;Weight by Age&quot;, las = 1, col = factor(cats$coat)) In this example "],
["8-2-ggplot2.html", "8.2 ggplot2", " 8.2 ggplot2 More recently, R users have moved away from base graphic options and towards a plotting package called ggplot2 that adds a lot of functionality to the basic plots seen above. The syntax is different but it’s extremely powerful and flexible. We can start by re-creating some of the above plots but using ggplot functions to get a feel for the syntax. Install and load the ggplot2 package. # install.packages(&quot;ggplot2&quot;) library(ggplot2) The ggplot() function is used to initialize the basic graph structure, then we add to it. The basic idea is that you specify different parts of the plot, and add them together using the + operator. We will start with a blank plot and will find that you will get an error, because you need to add layers. ggplot(cats) Geometric objects are the actual marks we put on a plot. Examples include: points (geom_point, for scatter plots, dot plots, etc) lines (geom_line, for time series, trend lines, etc) boxplot (geom_boxplot, for, well, boxplots!) A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator. ggplot(cats) + geom_point() Each type of geom usually has a required set of aesthetics to be set, and usually accepts only a subset of all aesthetics –refer to the geom help pages to see what mappings each geom accepts. Aesthetic mappings are set with the aes() function. Examples include: position (i.e., on the x and y axes) color (“outside” color) fill (“inside” color) shape (of points) linetype size To start, we will add position for the x- and y-axis since geom_point requires mappings for x and y, all others are optional. ggplot(cats) + geom_point(aes(x = age, y = weight), color = &quot;red&quot;, alpha = 0.5, shape = 1, size = 3) 8.2.1 Scales Scales control the mapping between data and aesthetics. ggplot(cats) + geom_point(aes(x = age, y = weight)) + scale_x_continuous(name = &quot;Age&quot;, breaks = c(1, 2, 3), limits = c(-5, 15)) + scale_y_continuous(&quot;Weight&quot;, trans = &quot;log&quot;) + ggtitle(label = &quot;Scatterplot&quot;) 8.2.2 Themes The ggplot2 theme system handles non-data plot elements such as: Axis labels Plot background Facet label backround Legend appearance There are built-in themes we can use, or we can adjust specific elements. We can add additional aesthetics by mapping them to other variables in our dataframe. For example, the color of the boxplots will reflect low birth weight. ggplot(cats) + geom_point(aes(x = age, y = weight)) + theme_bw() 8.2.3 Facets Facets display subsets of the dataset in different panels. Let’s use the facet_grid function to lay out panels in a grid. Each panel will have the same geometric objects. ggplot(cats) + geom_point(aes(x = age, y = weight)) + xlab(&quot;Mother&#39;s age&quot;) + ylab(&quot;Birth weight&quot;) + facet_grid(. ~ coat) + theme_linedraw() Here we have two panels one for each factor level of coat. The panels are layed out in columns because the expression . ~ coat 8.2.4 Writing figures to file There are two ways in which figures and plots can be output to a file (rather than simply displaying on screen). The first (and easiest) is to export directly from the RStudio ‘Plots’ panel, by clicking on Export when the image is plotted. This will give you the option of png or pdf and selecting the directory to which you wish to save it to. The second option is to use R functions in the console, allowing you the flexibility to specify parameters to dictate the size and resolution of the output image. Some of the more popular formats include pdf(), png, and svg. Initialize a plot that will be written directly to a file using pdf, png etc. Within the function you will need to specify a name for your image, and the with and height (optional). Then create a plot using the usual functions in R. Finally, close the file using the dev.off() function. There are also bmp, tiff, and jpeg functions, though the jpeg function has proven less stable than the others. pdf(&quot;figure/boxplot.pdf&quot;) ggplot(example_data) + geom_boxplot(aes(x = cit, y =....) + ggtitle(...) + xlab(...) + ylab(...) + theme(panel.grid.major = element_line(...), axis.text.x = element_text(...), axis.title = element_text(...), axis.text = element_text(...) dev.off() "],
["8-3-additional-resources.html", "8.3 Additional resources", " 8.3 Additional resources We only scratched the surface in this section. There are many more ggplot2 features we haven’t covered and other packages for data visualization. plotting in Base R: John Maindonald’s Using R for Data Analysis and Graphics PDF ggplot2: ggplot reference site Winston Chang’s excellent Cookbook for R ggplot2: Elegant Graphics for Data Anaysis Much of the material here was adpapted from Introduction to R graphics with ggplot2 Tutorial at IQSS. -->"],
["9-common-statistical-techniques-in-r.html", "Lesson 9 Common Statistical Techniques in R 9 Learning Objectives", " Lesson 9 Common Statistical Techniques in R 9 Learning Objectives To become familiar with common statistical functions available in R Linear Regression Logistic Regression K-Means Clustering 9.0.1 Simple Linear Regression Linear regression is one of the most commonly used methods in all of statistics. It is used for a large variety of applications and offers highly interpretable results. It was the first regression method discovered and belongs to one of the most important families of models, generalized linear models. Simple linear regression estimates the linear relationship between two variables, an outcome variable y, and an explanatory variable x. To fit a linear regression in R, we can use the lm() function (think linear model). We use the formula notation, y~x where y is the name of your outcome variable, and x is the name of your explanatory variable, both are unquoted. The easiest way to view the results interactively is with the summary() function. weight_fit &lt;- lm(formula = wander_dist ~ weight, data = cats) summary(weight_fit) In this case, the summary function returns an object that provides a lot of interesting information when printed out. It also stores that information as part of the object, things like the terms used in the model, the coefficients of the model estimates, and the residuals of the model. This is nice if we want to do something programmatic with the results. 9.0.2 Multiple Linear Regression We aren’t restricted to just one explanatory variable in linear regression. We can test the effect of a linear relationship between multiple explanatory variables simultaneously. In the lm function, we just add extra variable names in the formula separated by +’s. wander_fit &lt;- lm(formula = wander_dist ~ weight + age , data = cats) summary(wander_fit) 9.0.2 Challenge Fit a model predicting wander_dist and include weight, age, and fixed as predictors. What is the estimate for the effect of being fixed on the wandering distance? wander_fit &lt;- lm(formula = wander_dist ~ weight + age + fixed, data = cats) summary(wander_fit) If an explanatory variable is not binary (coded as 0s or 1s), we can still include it in the model. The lm function understands factors to be categorical variables automatically and will output the estimates with a reference category. wander_fit &lt;- lm(formula = wander_dist ~ weight + age + factor(coat) + sex, data = cats) summary_fit &lt;- summary(wander_fit) summary_fit[&#39;coefficients&#39;] 9.0.2 Challenge What command will return the r-squared value from the summary_lm_fit object after running these commands: wander_fit &lt;- lm(formula = wander_dist ~ weight + age + fixed, data = cats) summary_lm_fit &lt;- summary(wander_fit) The lm function also can estimate interactions between explanatory variables. This is useful if we think that the linear relationship between our outcome y and a variable x1 is different depending on the variable x2. This can be accomplished by connecting two variables in the formula with a * instead of a +. 9.0.2 Challenge Fit a linear regression model estimating the relationship between the outcome, wandering distance (wander_dist) and explanatory variables age (age), weight (weight), with an interaction between age and weight. What is the coefficient associated with the interaction between age and weight? wander_fit &lt;- lm(formula = wander_dist ~ weight * age, data = cats) summary(wander_fit) "],
["9-1-logistic-regression.html", "9.1 Logistic Regression", " 9.1 Logistic Regression If we are analyzing a binary outcome, we can use logistic regression. Logistic regression uses the linear model framework, but makes different assumptions about the distribution of the outcome. So we can look for associations between binary outcome variables and multiple explanatory variables. ggplot(cats, aes(x = roamer, y = wander_dist)) + geom_boxplot(width = 0.5) For logistic regression, we use the glm function. It takes formula and data arguments like the lm function, but we also need to specify a family. For logistic, we pass binomial as the family, which tells the glm function that we have a binary outcome, and we want to use the logit link function. roamer_fit &lt;- glm(formula = roamer ~ wander_dist, data = cats, family = binomial ) We can use the summary function to extract important information from the object that glm returns, just like with the lm function glm_summary &lt;- summary(roamer_fit) glm_summary 9.1 Challenge roamer_fit &lt;- glm(formula = roamer ~ wander_dist + weight, data = cats, family = binomial ) summary(roamer_fit) We can look at the effects of multiple covariates on our binary outcome with logistic regression, just like with linear regression. We just add as many variable names as we’d like to the right side of the formula argument, separated by + symbols. ggplot(cats, aes(x = weight, y = wander_dist, color = roamer)) + geom_point(size = 2) + geom_smooth(method = &#39;lm&#39;, se = FALSE, size = 3) + theme_bw(base_size = 18) # cats$roamer &lt;- relevel(cats$roamer, ref = &#39;yes&#39;) roamer_fit &lt;- glm(formula = roamer ~ wander_dist + weight, data = cats, family = binomial ) glm_summary &lt;- summary(roamer_fit) glm_summary names(glm_summary) glm_summary$coefficients glm_summary$null.deviance glm_summary$deviance glm_summary$aic We can also use the model objects to predict on unobserved values. We just need to pass a data frame with all of the terms used in the original model to the predict function. The predict function will return values in a few different ways. The default value of the type argument is “link” and will return things on the same scale as the linear predictors. This is often not what we want. If we pass “response” to the type argument, we’ll get predicted values on the same scale as the response. In the logistic case, this is the predicted probability. new_cats &lt;- data.frame(wander_dist = c(0.15, 0.10, 0.05), weight = c(2, 6, 12)) new_cats predicted_logit &lt;- predict(object = roamer_fit, newdata = new_cats) predicted_logit predicted_probs &lt;- predict(object = roamer_fit, newdata = new_cats, type = &#39;response&#39;) predicted_probs We can then predict whether each cat is a roamer or not based on the predicted probabilty from our model. We need to assign a cut-off probability. new_cats$predicted_prob &lt;- predicted_probs new_cats &lt;- new_cats %&gt;% mutate(roamer = ifelse(predicted_prob &gt; 0.5, &#39;yes&#39;, &#39;no&#39;)) ggplot(cats, aes(x = weight, y = wander_dist, color = roamer, group = roamer)) + geom_point(size = 2) + geom_point(data = new_cats, aes(x = weight, y = wander_dist, color = roamer), size = 8) + theme_bw(base_size = 18) "],
["9-2-k-means-clustering.html", "9.2 K-means Clustering", " 9.2 K-means Clustering Another popular machine learning technique is k-means clustering. It seeks to group your data into a fixed number of clusters based on a measure of distance. An important pre-processing step to clustering is the center and scale your data. cats &lt;- cats %&gt;% mutate(scale_weight = as.numeric(scale(weight)), scale_wander = as.numeric(scale(wander_dist)), scale_age = as.numeric(scale(age))) We use the kmeans function to perform the clustering, and need to pass it a data frame, the number of centers we want, and another argument nstart, which helps get around some numerical issues if the algorithm gets stuck in a local extrema. cats_cluster &lt;- kmeans(x = cats %&gt;% dplyr::select(scale_weight, scale_wander, scale_age), centers = 3, nstart = 20) str(cats_cluster) cats_cluster$centers We can use ggplot to visualize the clusters. cats$cluster &lt;- factor(cats_cluster$cluster) cluster_centers &lt;- as.data.frame(cats_cluster$centers) ggplot(data = cats) + geom_point(aes(x = scale_age, y = scale_weight, color = cluster), size = 4) + geom_point(data = cluster_centers, aes(x = scale_age, y = scale_weight), color = &#39;black&#39;, size = 8) + theme_bw(base_size = 18) ggplot(data = cats) + geom_point(aes(x = scale_age, y = scale_wander, color = cluster), size = 4) + geom_point(data = cluster_centers, aes(x = scale_age, y = scale_wander), color = &#39;black&#39;, size = 8) + theme_bw(base_size = 18) ggplot(data = cats) + geom_point(aes(x = scale_weight, y = scale_wander, color = cluster), size = 4) + geom_point(data = cluster_centers, aes(x = scale_weight, y = scale_wander), color = &#39;black&#39;, size = 8) + theme_bw(base_size = 18) -->"]
]
