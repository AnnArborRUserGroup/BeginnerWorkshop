[
["index.html", "Beginner R Workshop Welcome", " Beginner R Workshop Ann Arbor R User Group Welcome This is the core content for the R Workshop. Introductions here. Welcome to the R community (have a sticker). "],
["requirements.html", "Requirements", " Requirements These lessons assume no prior knowledge of the skills or tools, but working through this lesson requires working copies of the software described below. To most effectively use these materials, please make sure to install everything before working through this lesson. R and RStudio R is a programming language that is especially powerful for data exploration, visualization, and statistical analysis. To interact with R, we use RStudio. Get R from the R project website. Get Rstudio from the RStudio website "],
["slack.html", "Slack", " Slack We’ll use Slack to communicate during the workshop. The AARUG slack group is also a great resource for hearing about R-related events, announcements, and receiving help with your R code. Request to join the AARUG slack group here. "],
["authors-and-contributors.html", "Authors and Contributors", " Authors and Contributors Lesson plans were adapted from Software Carpentry and Data Carpentry lessons. You can contribute to these lessons by clicking the Edit button from any page. Contributors Michelle Berry, Ellis Valentiner, Rob Weyant, Clayton Yochum, Andrew Moore -->"],
["1-basics-of-r.html", "Lesson 1 Basics of R Learning Objectives", " Lesson 1 Basics of R Learning Objectives Articulating motivations for using R Introduce participants to the RStudio interface Point to relevant information on how to get help, and understand how to ask well formulated questions R is a versatile, open source programming/scripting language that’s useful both for statistics but also data science. Inspired by the programming language S. Open source software under GPL. Superior (if not just comparable) to commercial alternatives. R has over 7,000 user contributed packages at this time. It’s widely used both in academia and industry. Available on all platforms. Not just for statistics, but also general purpose programming. For people who have experience in programmming: R is both an object-oriented and a so-called functional language Large and growing community of peers. "],
["1-1-awesome-r-tools.html", "1.1 Awesome R tools", " 1.1 Awesome R tools 1.1.1 Knitr/R-markdown Knitr is an R library that allows you to create dynamic code reports. Example: This BuzzFeed article, reporting on government surveillance planes, included all of their analysis as an R-markdown document. 1.1.2 Shiny Shiny is a web application framework built for R. Example: This is a shiny app to visualize and explore a movie dataset. 1.1.3 RStudio RStudio is an IDE- an integrated development environment. It allows us to write, execute, and debug R code. It also has several other nice features, accessible through its GUI (graphical user interface), that make it easier to use R. RStudio is such a popular tool among R users, that several other languages have tried to emulate it, such as Spyder for Python. Start RStudio – Let’s start learning about our tool. Rstudio’s layout includes 4 quadrants Scripts Console Environment/History Plotting/Packages/Help rstudio-image To adjust the layout of your quadrants go to Preferences &gt; Pane Layout "],
["1-2-interacting-with-r.html", "1.2 Interacting with R", " 1.2 Interacting with R There are two main ways of interacting with R: using the console or by using script files (plain text files that contain your code). The console window is the place where R is waiting for you to tell it what to do, and where it will show the results of a command. You can type commands directly into the console, but they will be forgotten when you close the session. It is better to enter the commands in the script editor, and save the script. This way, you have a complete record of what you did, you can easily show others how you did it and you can do it again later on if needed. You can copy-paste into the R console, but the Rstudio script editor allows you to ‘send’ the current line or the currently selected text to the R console using the Ctrl-Enter shortcut. If R is ready to accept commands, the R console shows a &gt; prompt. If it receives a command (by typing, copy-pasting or sent from the script editor using Ctrl-Enter), R will try to execute it, and when ready, show the results and come back with a new &gt;-prompt to wait for new commands. If R is still waiting for you to enter more data because it isn’t complete yet, the console will show a + prompt. It means that you haven’t finished entering a complete command. This is because you have not ‘closed’ a parenthesis or quotation. If you’re in Rstudio and this happens, click inside the console window and press Esc; this should help you out of trouble. "],
["1-3-seeking-help.html", "1.3 Seeking help", " 1.3 Seeking help 1.3.1 I know the name of the function I want to use, but I’m not sure how to use it If you need help with a specific function, let’s say barplot(), you can type: ?barplot If you just need to remind yourself of the names of the arguments, you can use: args(lm) If the function is part of a package that is installed on your computer but don’t remember which one, you can type: ??geom_point 1.3.2 I want to use a function that does X, there must be a function for it but I don’t know which one… If you are looking for a function to do a particular task, you can use help.search() (but only looks through the installed packages): help.search(&quot;kruskal&quot;) If you can’t find what you are looking for, you can use the rdocumention.org website that search through the help files across all packages available. 1.3.3 I am stuck… I get an error message that I don’t understand Start by googling the error message. However, this doesn’t always work very well because often, package developers rely on the error catching provided by R. You end up with general error messages that might not be very helpful to diagnose a problem (e.g. “subscript out of bounds”). However, you should check stackoverflow. Search using the [r] tag. Most questions have already been answered, but the challenge is to use the right words in the search to find the answers: http://stackoverflow.com/questions/tagged/r The Introduction to R can also be dense for people with little programming experience but it is a good place to understand the underpinnings of the R language. The R FAQ is dense and technical but it is full of useful information. 1.3.4 Asking for help The key to get help from someone is for them to grasp your problem rapidly. You should make it as easy as possible to pinpoint where the issue might be. Try to use the correct words to describe your problem. For instance, a package is not the same thing as a library. Most people will understand what you meant, but others have really strong feelings about the difference in meaning. The key point is that it can make things confusing for people trying to help you. Be as precise as possible when describing your problem If possible, try to reduce what doesn’t work to a simple reproducible example. If you can reproduce the problem using a very small data.frame instead of your 50,000 rows and 10,000 columns one, provide the small one with the description of your problem. When appropriate, try to generalize what you are doing so even people who are not in your field can understand the question. If you want to share your object, provide either the raw file (i.e., your CSV file) with your script up to the point of the error (and after removing everything that is not relevant to your issue). Alternatively, in particular if your questions is not related to a data.frame, you can save any R object to a file: saveRDS(iris, file=&quot;/tmp/iris.rds&quot;) The content of this file is however not human readable and cannot be posted directly on stackoverflow. It can however be sent to someone by email who can read it with this command: some_data &lt;- readRDS(file=&quot;~/Downloads/iris.rds&quot;) Last, but certainly not least, always include the output of sessionInfo() as it provides critical information about your platform, the versions of R and the packages that you are using, and other information that can be very helpful to understand your problem. sessionInfo() ## R version 3.3.2 (2016-10-31) ## Platform: x86_64-apple-darwin16.1.0 (64-bit) ## Running under: macOS Sierra 10.12.1 ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] backports_1.0.4 bookdown_0.3 magrittr_1.5 rprojroot_1.1 ## [5] tools_3.3.2 htmltools_0.3.5 rstudioapi_0.6 yaml_2.1.14 ## [9] Rcpp_0.12.8 stringi_1.1.2 rmarkdown_1.2 knitr_1.15.1 ## [13] stringr_1.1.0 digest_0.6.10 evaluate_0.10 1.3.5 Where to ask for help? Your friendly colleagues: if you know someone with more experience than you, they might be able and willing to help you. Stackoverflow: if your question hasn’t been answered before and is well crafted, chances are you will get an answer in less than 5 min. The R-help: it is read by a lot of people (including most of the R core team), a lot of people post to it, but the tone can be pretty dry, and it is not always very welcoming to new users. If your question is valid, you are likely to get an answer very fast but don’t expect that it will come with smiley faces. Also, here more than everywhere else, be sure to use correct vocabulary (otherwise you might get an answer pointing to the misuse of your words rather than answering your question). You will also have more success if your question is about a base function rather than a specific package. If your question is about a specific package, see if there is a mailing list for it. Usually it’s included in the DESCRIPTION file of the package that can be accessed using packageDescription(&quot;name-of-package&quot;). You may also want to try to email the author of the package directly. There are also some topic-specific mailing lists (GIS, phylogenetics, etc…), the complete list is here. 1.3.6 More resources The Posting Guide for the R mailing lists. How to ask for R help useful guidelines -->"],
["2-data-visualization.html", "Lesson 2 Data visualization Learning Objectives", " Lesson 2 Data visualization Learning Objectives Grammar of graphics concepts (geoms, aesthetics) Advanced plots (scales, facets, themes) Writing images (and other things) to file "],
["2-1-built-in-plotting-functions.html", "2.1 Built in plotting functions", " 2.1 Built in plotting functions When working with large sets of numbers it can be useful to display that information graphically. R has a number of built-in functions for creating plots such as histograms, scatter plots, bar charts, boxplots and much more. We’ll try these out using the cats data introduced earlier. The plot() function provides a method for generic x and y plotting (e.g. scatter plots). Scatter plot Let’s start by creating a scatter plot. A scatter plot provides a graphical view of the relationship between two sets of numbers. We can create a scatter plot using the plot() function and supplying the x and y coordinates of the points. Using the cats data, we can make a scatterplot of kitten birth weight by mother’s age. cats &lt;- read.csv(&quot;data/herding-cats.csv&quot;) plot(x = cats$age, y = cats$weight) Each point represents a row in our dataset. The value on the x-axis is the mother’s age and the values on the y-axis correspond to the birth weight for the infant. For any plot you can customize many features of your graphs (fonts, colors, axes, titles) through graphic options. plot(x = cats$age, y = cats$weight, xlim = c(0, 10), ylim = c(0, 15), xlab = &quot;Age&quot;, ylab = &quot;Weight&quot;, main = &quot;Weight by Age&quot;, las = 1, col = factor(cats$coat)) In this example "],
["2-2-ggplot2.html", "2.2 ggplot2", " 2.2 ggplot2 More recently, R users have moved away from base graphic options and towards a plotting package called ggplot2 that adds a lot of functionality to the basic plots seen above. The syntax is different but it’s extremely powerful and flexible. We can start by re-creating some of the above plots but using ggplot functions to get a feel for the syntax. Install and load the ggplot2 package. # install.packages(&quot;ggplot2&quot;) library(ggplot2) The ggplot() function is used to initialize the basic graph structure, then we add to it. The basic idea is that you specify different parts of the plot, and add them together using the + operator. We will start with a blank plot and will find that you will get an error, because you need to add layers. ggplot(cats) Geometric objects are the actual marks we put on a plot. Examples include: points (geom_point, for scatter plots, dot plots, etc) lines (geom_line, for time series, trend lines, etc) boxplot (geom_boxplot, for, well, boxplots!) A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator. ggplot(cats) + geom_point() Each type of geom usually has a required set of aesthetics to be set, and usually accepts only a subset of all aesthetics –refer to the geom help pages to see what mappings each geom accepts. Aesthetic mappings are set with the aes() function. Examples include: position (i.e., on the x and y axes) color (“outside” color) fill (“inside” color) shape (of points) linetype size To start, we will add position for the x- and y-axis since geom_point requires mappings for x and y, all others are optional. ggplot(cats) + geom_point(aes(x = age, y = weight), color = &quot;red&quot;, alpha = 0.5, shape = 1, size = 3) 2.2.1 Scales Scales control the mapping between data and aesthetics. ggplot(cats) + geom_point(aes(x = age, y = weight)) + scale_x_continuous(name = &quot;Age&quot;, breaks = c(1, 2, 3), limits = c(-5, 15)) + scale_y_continuous(&quot;Weight&quot;, trans = &quot;log&quot;) + ggtitle(label = &quot;Scatterplot&quot;) 2.2.2 Themes The ggplot2 theme system handles non-data plot elements such as: Axis labels Plot background Facet label backround Legend appearance There are built-in themes we can use, or we can adjust specific elements. We can add additional aesthetics by mapping them to other variables in our dataframe. For example, the color of the boxplots will reflect low birth weight. ggplot(cats) + geom_point(aes(x = age, y = weight)) + theme_bw() 2.2.3 Facets Facets display subsets of the dataset in different panels. Let’s use the facet_grid function to lay out panels in a grid. Each panel will have the same geometric objects. ggplot(cats) + geom_point(aes(x = age, y = weight)) + xlab(&quot;Mother&#39;s age&quot;) + ylab(&quot;Birth weight&quot;) + facet_grid(. ~ coat) + theme_linedraw() Here we have two panels one for each factor level of coat. The panels are layed out in columns because the expression . ~ coat 2.2.4 Writing figures to file There are two ways in which figures and plots can be output to a file (rather than simply displaying on screen). The first (and easiest) is to export directly from the RStudio ‘Plots’ panel, by clicking on Export when the image is plotted. This will give you the option of png or pdf and selecting the directory to which you wish to save it to. The second option is to use R functions in the console, allowing you the flexibility to specify parameters to dictate the size and resolution of the output image. Some of the more popular formats include pdf(), png, and svg. Initialize a plot that will be written directly to a file using pdf, png etc. Within the function you will need to specify a name for your image, and the with and height (optional). Then create a plot using the usual functions in R. Finally, close the file using the dev.off() function. There are also bmp, tiff, and jpeg functions, though the jpeg function has proven less stable than the others. pdf(&quot;figure/boxplot.pdf&quot;) ggplot(example_data) + geom_boxplot(aes(x = cit, y =....) + ggtitle(...) + xlab(...) + ylab(...) + theme(panel.grid.major = element_line(...), axis.text.x = element_text(...), axis.title = element_text(...), axis.text = element_text(...) dev.off() "],
["2-3-additional-resources.html", "2.3 Additional resources", " 2.3 Additional resources We only scratched the surface in this section. There are many more ggplot2 features we haven’t covered and other packages for data visualization. plotting in Base R: John Maindonald’s Using R for Data Analysis and Graphics PDF ggplot2: ggplot reference site Winston Chang’s excellent Cookbook for R ggplot2: Elegant Graphics for Data Anaysis Much of the material here was adpapted from Introduction to R graphics with ggplot2 Tutorial at IQSS. -->"]
]
